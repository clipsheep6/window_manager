# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../windowmanager_aafwk.gni")

config("libwm_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "../wmserver/include",
    "../wmserver/include/zidl",
    "//foundation/arkui/napi",  # because of ability_context.h
  ]
}

config("libwm_public_config") {
  include_dirs = [
    "../interfaces/innerkits/wm",
    "../utils/include",
    "../window_scene",
  ]
}

## Build libwm_static.a
ohos_static_library("libwm_static") {
  include_dirs = [ "../utils/include" ]

  sources = [
    "../wmserver/src/zidl/window_manager_proxy.cpp",
    "src/color_parser.cpp",
    "src/input_transfer_station.cpp",
    "src/static_call.cpp",
    "src/vsync_station.cpp",
    "src/window.cpp",
    "src/window_accessibility_controller.cpp",
    "src/window_adapter.cpp",
    "src/window_agent.cpp",
    "src/window_extension_session_impl.cpp",
    "src/window_frame_trace_impl.cpp",
    "src/window_impl.cpp",
    "src/window_input_channel.cpp",
    "src/window_manager.cpp",
    "src/window_manager_agent.cpp",
    "src/window_option.cpp",
    "src/window_scene.cpp",
    "src/window_scene_session_impl.cpp",
    "src/window_session_impl.cpp",
    "src/zidl/window_manager_agent_stub.cpp",
    "src/zidl/window_stub.cpp",
  ]

  configs = [
    ":libwm_private_config",
    "${window_base_path}/resources/config/build:coverage_flags",
  ]

  public_configs = [ ":libwm_public_config" ]

  deps = [
    "${graphic_base_path}/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "${window_base_path}/dm:libdm",
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session_manager:session_manager",
  ]

  external_deps = [
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ace_engine:ace_uicontent",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_standard:window_animation",
    "hilog_native:libhilog",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "input:libmmi-client",
    "ipc:ipc_single",
    "multimedia_image_framework:image_native",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (efficiency_manager_enable) {
    external_deps += [ "efficiency_manager:suspend_manager_client" ]
    defines += [ "EFFICIENCY_MANAGER_ENABLE" ]
  }

  if (defined(global_parts_info)) {
    if (defined(
        global_parts_info.hmosresourceschedule_resourceschedule_frame_aware_sched_override)) {
      defines += [ "FRAME_TRACE_ENABLE" ]
      external_deps +=
          [ "resourceschedule_frame_aware_sched_override:frame_trace_intf" ]
    } else if (defined(global_parts_info.resourceschedule_frame_aware_sched)) {
      defines += [ "FRAME_TRACE_ENABLE" ]
      external_deps += [ "frame_aware_sched:frame_trace_intf" ]
    }
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_resource_schedule_service)) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
  }

  if (!defined(global_parts_info) ||
      defined(global_parts_info.inputmethod_imf)) {
    imf_enable = true
  } else {
    imf_enable = false
  }
  print("imf_enable: ", imf_enable)

  if (imf_enable == true) {
    external_deps += [ "imf:inputmethod_client" ]
    defines += [ "IMF_ENABLE" ]
  }

  part_name = "window_manager"
  subsystem_name = "window"
}

## Build libwm.so
ohos_shared_library("libwm") {
  include_dirs = [ "../utils/include" ]

  sources = [
    "../wmserver/src/zidl/window_manager_proxy.cpp",
    "src/color_parser.cpp",
    "src/input_transfer_station.cpp",
    "src/static_call.cpp",
    "src/vsync_station.cpp",
    "src/window.cpp",
    "src/window_accessibility_controller.cpp",
    "src/window_adapter.cpp",
    "src/window_agent.cpp",
    "src/window_extension_session_impl.cpp",
    "src/window_frame_trace_impl.cpp",
    "src/window_impl.cpp",
    "src/window_input_channel.cpp",
    "src/window_manager.cpp",
    "src/window_manager_agent.cpp",
    "src/window_option.cpp",
    "src/window_scene.cpp",
    "src/window_scene_session_impl.cpp",
    "src/window_session_impl.cpp",
    "src/zidl/window_manager_agent_stub.cpp",
    "src/zidl/window_stub.cpp",
  ]

  configs = [
    ":libwm_private_config",
    "../resources/config/build:coverage_flags",
  ]

  public_configs = [ ":libwm_public_config" ]

  deps = [
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session_manager:session_manager",
    "../dm:libdm",
    "../utils:libwmutil",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
  ]

  external_deps = [
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ace_engine:ace_uicontent",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_standard:window_animation",
    "hilog_native:libhilog",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "input:libmmi-client",
    "ipc:ipc_single",
    "multimedia_image_framework:image_native",
    "samgr:samgr_proxy",
  ]

  innerapi_tags = [ "platformsdk" ]  #define the type of the inner API

  defines = []
  if (efficiency_manager_enable) {
    external_deps += [ "efficiency_manager:suspend_manager_client" ]
    defines += [ "EFFICIENCY_MANAGER_ENABLE" ]
  }

  if (defined(global_parts_info)) {
    if (defined(
        global_parts_info.hmosresourceschedule_resourceschedule_frame_aware_sched_override)) {
      defines += [ "FRAME_TRACE_ENABLE" ]
      external_deps +=
          [ "resourceschedule_frame_aware_sched_override:frame_trace_intf" ]
    } else if (defined(global_parts_info.resourceschedule_frame_aware_sched)) {
      defines += [ "FRAME_TRACE_ENABLE" ]
      external_deps += [ "frame_aware_sched:frame_trace_intf" ]
    }
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_resource_schedule_service)) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESOURCE_SCHEDULE_SERVICE_ENABLE" ]
  }

  if (!defined(global_parts_info) ||
      defined(global_parts_info.inputmethod_imf)) {
    imf_enable = true
  } else {
    imf_enable = false
  }
  print("imf_enable: ", imf_enable)

  if (imf_enable == true) {
    external_deps += [ "imf:inputmethod_client" ]
    defines += [ "IMF_ENABLE" ]
  }

  version_script = "libwm.map"
  part_name = "window_manager"
  subsystem_name = "window"
}

group("test") {
  testonly = true
  deps = [ "test:test" ]
}

# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

config("libwm_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "../wmserver/include",

    # todo for abilitycontext need delete it
    "//foundation/aafwk/standard/frameworks/kits/ability/ability_runtime/include",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager/include",
    "//foundation/aafwk/standard/interfaces/innerkits/app_manager/include/appmgr",
    "//third_party/jsoncpp/include",
    "//third_party/json/include",
  ]

  if (defined(product_name) &&
      (product_name == "rk3566" || product_name == "rk3568" ||
       product_name == "Hi3516DV300" || product_name == "watchos")) {
    defines = [ "PRODUCT_RK" ]
  }
}

config("libwm_public_config") {
  include_dirs = [
    "../interfaces/innerkits/wm",
    "../utils/include",
  ]
}

## Build libwm.so
ohos_shared_library("libwm") {
  sources = [
    "../wmserver/src/window_manager_proxy.cpp",
    "src/input_transfer_station.cpp",
    "src/static_call.cpp",
    "src/vsync_station.cpp",
    "src/window.cpp",
    "src/window_adapter.cpp",
    "src/window_agent.cpp",
    "src/window_impl.cpp",
    "src/window_input_channel.cpp",
    "src/window_manager.cpp",
    "src/window_manager_agent.cpp",
    "src/window_option.cpp",
    "src/window_scene.cpp",
    "src/window_stub.cpp",
    "src/zidl/window_manager_agent_stub.cpp",
  ]

  configs = [ ":libwm_private_config" ]

  public_configs = [ ":libwm_public_config" ]

  deps = [
    "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",
    "//foundation/windowmanager/dm:libdm",
    "//foundation/windowmanager/utils:libwmutil",

    # vsync
    "//foundation/graphic/standard:libvsync_client",
  ]

  external_deps = [
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:want",
    "ace_engine_standard:ace_uicontent",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "bytrace_standard:bytrace_core",
    "graphic_standard:surface",
    "hilog_native:libhilog",
    "inputmethod_native:inputmethod_client",
    "ipc:ipc_core",
    "multimedia_image_standard:image_native",
    "multimodalinput_base:libmmi-client",
    "napi:ace_napi",

    # because appexecfwk_core depends on global_resmgr
    "resmgr_standard:global_resmgr",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]

  part_name = "window_manager"
  subsystem_name = "window"
}

group("test") {
  testonly = true
  deps = [ "test:test" ]
}

diff --git a/interfaces/kits/napi/window_runtime/BUILD.gn b/interfaces/kits/napi/window_runtime/BUILD.gn
index 4c58fe3..1a58c35 100644
--- a/interfaces/kits/napi/window_runtime/BUILD.gn
+++ b/interfaces/kits/napi/window_runtime/BUILD.gn
@@ -9,7 +9,7 @@
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
-# limitations under the License.
+# limitations under the License.
 
 import("//ark/ts2abc/ts2panda/ts2abc_config.gni")
 import("//build/ohos.gni")
@@ -23,6 +23,7 @@ config("window_manager_napi_config") {
     "//foundation/windowmanager/interfaces/innerkits/dm",
     "//foundation/windowmanager/wm/include",
     "//foundation/windowmanager/utils/include",
+    "//foundation/appexecfwk/standard/kits/appkit/native/ability_runtime/context",
   ]
 }
 
@@ -40,6 +41,9 @@ ohos_shared_library("windowmanager_napi") {
     "//foundation/windowmanager/wm:libwm",
     "//foundation/windowmanager/wm:libwmutil",
     "//foundation/windowmanager/wmserver:libwms",
+    "//foundation/appexecfwk/standard/kits:appkit_native",
+    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
+    "//foundation/appexecfwk/standard/kits:app_context",
   ]
 
   external_deps = [
diff --git a/interfaces/kits/napi/window_runtime/js_window_manager.cpp b/interfaces/kits/napi/window_runtime/js_window_manager.cpp
index 1e883ac..fc45601 100644
--- a/interfaces/kits/napi/window_runtime/js_window_manager.cpp
+++ b/interfaces/kits/napi/window_runtime/js_window_manager.cpp
@@ -13,6 +13,8 @@
  * limitations under the License.
  */
 #include "js_window_manager.h"
+#include <ability.h>
+#include "context.h"
 #include "js_runtime_utils.h"
 #include "js_window.h"
 #include "js_window_utils.h"
@@ -50,8 +52,15 @@ public:
         return (me != nullptr) ? me->OnFindWindow(*engine, *info) : nullptr;
     }
 
-private:
+    static NativeValue* GetTopWindow(NativeEngine* engine, NativeCallbackInfo* info)
+    {
+        JsWindowManager* me = CheckParamsAndGetThis<JsWindowManager>(engine, info);
+        return (me != nullptr) ? me->OnGetTopWindow(*engine, *info) : nullptr;
+    }
 
+private:
+    bool isNewApi_ = true;
+    std::weak_ptr<Context> context_;
     NativeValue* OnCreateWindow(NativeEngine& engine, NativeCallbackInfo& info)
     {
         WLOGFI("JsOnCreateWindow is called");
@@ -120,6 +129,67 @@ private:
             engine, CreateAsyncTaskWithLastParam(engine, lastParam, nullptr, std::move(complete), &result));
         return result;
     }
+
+    bool GetAPI7Ability(NativeEngine& engine, AppExecFwk::Ability* ability)
+    {
+        napi_value global;
+        auto env = reinterpret_cast<napi_env>(&engine);
+        if (napi_get_global(env, &global) != napi_ok) {
+            WLOGFI("JsWindowManager::GetAPI7Ability get global failed");
+            return false;
+        }
+        napi_value jsAbility;
+        if (napi_get_named_property(env, global, "ability", &jsAbility) != napi_ok) {
+            WLOGFI("JsWindowManager::GetAPI7Ability get global failed");
+            return false;
+        }
+        if (napi_get_value_external(env, jsAbility, reinterpret_cast<void **>(&ability)) != napi_ok) {
+            WLOGFI("JsWindowManager::GetAPI7Ability get global failed");
+            return false;
+        }
+        return true;
+    }
+
+    NativeValue* OnGetTopWindow(NativeEngine& engine, NativeCallbackInfo& info)
+    {
+        NativeValue* nativeContext = nullptr;
+        NativeValue* nativeCallback = nullptr;
+        if (info.argv[0]->TypeOf() == NATIVE_OBJECT) { // (context, callback?)
+            isNewApi_ = true;
+            nativeContext = info.argv[0];
+            nativeCallback = (info.argc == ARGC_ONE) ? nullptr : info.argv[1];
+        } else { // (callback?)
+            isNewApi_ = false;
+            nativeCallback = (info.argc == ARGC_ONE) ? nullptr : info.argv[1];
+        }
+
+
+        AsyncTask::CompleteCallback complete =
+            [this, weak = context_](NativeEngine& engine, AsyncTask& task, int32_t status) {
+                AppExecFwk::Ability* ability = nullptr;
+                if (!isNewApi_) {
+                    if (!GetAPI7Ability(engine, ability) || ability == nullptr) {
+                        task.Reject(engine, CreateJsError(engine,
+                            static_cast<int32_t>(WMError::WM_ERROR_NULLPTR), "JsWindow::onGetTopWindow failed."));
+                    }
+                    sptr<Window> window = ability->GetWindow();
+                    task.Resolve(engine, CreateJsWindowObject(engine, window));
+                    WLOGFI("JsWindowManager::OnGetTopWindow success");
+                } else {
+                    auto context = weak.lock();
+                    if (context != nullptr) {
+                        WLOGFI("JsWindowManager::OnGetTopWindow success");
+                    } else {
+                        task.Reject(engine, CreateJsError(engine,
+                            static_cast<int32_t>(WMError::WM_ERROR_NULLPTR), "JsWindow::onGetTopWindow newAPI failed."));
+                    }
+                }
+            };
+        NativeValue* result = nullptr;
+        AsyncTask::Schedule(
+            engine, CreateAsyncTaskWithLastParam(engine, nativeCallback, nullptr, std::move(complete), &result));
+        return result;
+    }
 };
 
 NativeValue* JsWindowManagerInit(NativeEngine* engine, NativeValue* exportObj)
@@ -142,7 +212,7 @@ NativeValue* JsWindowManagerInit(NativeEngine* engine, NativeValue* exportObj)
 
     BindNativeFunction(*engine, *object, "create", JsWindowManager::CreateWindow);
     BindNativeFunction(*engine, *object, "find", JsWindowManager::FindWindow);
-
+    BindNativeFunction(*engine, *object, "getTopWindow", JsWindowManager::GetTopWindow);
     return engine->CreateUndefined();
 }
 }  // namespace Rosen

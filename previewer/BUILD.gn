# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../windowmanager_aafwk.gni")

if (host_os == "mac") {
  suffix = ".dylib"
  hilog_platform = "mac"
} else {
  suffix = ".dll"
  hilog_platform = "windows"
}

config("previewer_window_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "${arkui_path}/ace_engine/adapter/preview/external/multimodalinput",
    "${arkui_path}/ace_engine/",
  ]
}

ohos_shared_library("previewer_window") {
  public_configs = [ ":previewer_window_config" ]

  libs = []

  sources = [
    "../utils/src/window_transition_info.cpp",
    "../utils/src/wm_math.cpp",
    "src/vsync_station.cpp",
    "src/window.cpp",
    "src/window_impl.cpp",
    # "src/window_input_channel.cpp",
    "src/window_option.cpp",
    "src/window_scene.cpp",
    # "src/input_transfer_station.cpp",
  ]

  include_dirs = [
    "include",
    "mock",
    "../utils/include",
  ]

  deps = [
    "${graphic_base_path}/graphic_2d/rosen/modules/platform:utils",
    "${hilog_path}/interfaces/native/innerkits:libhilog_" +
        hilog_platform,
    "${graphic_base_path}/graphic_2d/rosen/modules/render_service_client:librender_service_client",
    "${graphic_base_path}/graphic_2d/rosen/modules/platform:ipc_core",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ace:ace_uicontent",
  ]


  cflags = [ "-std=c++11" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

config("previewer_window_napi_config") {
  visibility = [ ":*" ]

  include_dirs = [ "../interfaces/kits/napi/window_runtime/window_napi" ]
}

ohos_shared_library("previewer_window_napi") {
  public_configs = [ ":previewer_window_napi_config" ]

  libs = []

  sources = [
    "${ability_runtime_path}/frameworks/simulator/ability_simulator/src/js_runtime_utils.cpp",
    "../interfaces/kits/napi/window_runtime/window_napi/js_window.cpp",
    "../interfaces/kits/napi/window_runtime/window_napi/js_window_utils.cpp",
    "../interfaces/kits/napi/window_runtime/window_stage_napi/js_window_stage.cpp",
    # mock
    "mock/js_transition_controller.cpp",
    "mock/js_window_register_manager.cpp",
    "mock/permission.cpp",
    "mock/pixel_map_napi.cpp",
  ]

  include_dirs = [
    ".",
    "include",
    "../utils/include",
    "mock",
    "mock/transaction",
    "${ability_runtime_path}/interfaces/inner_api/runtime/include",
    "../interfaces/kits/napi/window_runtime/window_stage_napi",
  ]

  deps = [
    "${graphic_base_path}/graphic_2d/rosen/modules/platform:utils",
    ":previewer_window",
    "${arkui_path}/napi:ace_napi",
    "${arkui_path}/napi:ace_napi_ark",
    "${hilog_path}/interfaces/native/innerkits:libhilog_" +
        hilog_platform,
    "${graphic_base_path}/graphic_2d/rosen/modules/platform:ipc_core",
  ]

  cflags_cc = [ "-DWINDOW_PREVIEW" ]
  cflags = [ "-std=c++11" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

ohos_copy("window_stage_copy_modules") {
  deps = []
  sources = []

  napi_modules = [ "window_stage_modules:windowstage" ]

  foreach(module, napi_modules) {
    deps += [ module ]
    out_path = get_label_info(module, "root_out_dir")
    out_name = get_label_info(module, "name")
    sources += [ out_path + "/window/window_manager/lib" + out_name + suffix ]
  }

  target_path = get_label_info(":copy_previewer_library", "target_out_dir")

  outputs = [ target_path +
              "/previewer/common/bin/module/application/{{source_file_part}}" ]
}

ohos_copy("copy_previewer_library") {
  deps = [ ":window_stage_copy_modules" ]
  sources = []

  shared_library_path = get_label_info(":previewer_window", "root_out_dir")
  sources += [ shared_library_path +
               "/window/window_manager/libpreviewer_window" + suffix ]
  deps += [ ":previewer_window" ]

  shared_library_path = get_label_info(":previewer_window_napi", "root_out_dir")
  sources += [ shared_library_path +
               "/window/window_manager/libpreviewer_window_napi" + suffix ]
  deps += [ ":previewer_window_napi" ]

  outputs = [ target_out_dir + "/previewer/common/bin/{{source_file_part}}" ]
  module_source_dir = target_out_dir + "/previewer/common/bin/"
  module_install_name = ""

  part_name = "window_manager"
  subsystem_name = "window"
}

# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

config("libwe_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "../../wmserver/include",
    "//foundation/aafwk/standard/frameworks/kits/ability/ability_runtime/include",
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager/include",
    "//foundation/aafwk/standard/interfaces/innerkits/app_manager/include/appmgr",
    "//third_party/jsoncpp/include",
    "//third_party/json/include",
  ]
}

config("libwe_public_config") {
  include_dirs = [
    "../../interfaces/innerkits/wm",
    "../../utils/include",
  ]
}

## Build libwe.so
ohos_shared_library("libwe") {
  sources = [
    "src/js_window_extension_context.cpp",
    "src/js_window_extension.cpp",
    "src/window_extension_client_proxy.cpp",
    "src/window_extension_client_stub.cpp",
    "src/window_extension_client_stub_impl.cpp",
    "src/window_extension_module_loader.cpp",
    "src/window_extension.cpp",
  ]

  configs = [ ":libwe_private_config" ]

  public_configs = [ ":libwe_public_config" ]

  deps = [
    "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",
    "//foundation/windowmanager/wm:libwm",
    "//foundation/windowmanager/utils:libwmutil",

    # vsync
    "//foundation/graphic/standard/rosen/modules/composer:libcomposer",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:runtime",
    "ability_runtime:abilitykit_native",
    "ace_engine_standard:ace_uicontent",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "bytrace_standard:bytrace_core",
    "graphic_standard:surface",
    "hilog_native:libhilog",
    "input:libmmi-client",
    "inputmethod_native:inputmethod_client",
    "ipc:ipc_core",
    "multimedia_image_standard:image_native",
    "napi:ace_napi",
    "power_manager_native:powermgr_client",

    # because appexecfwk_core depends on global_resmgr
    "resmgr_standard:global_resmgr",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]

  part_name = "window_manager"
  subsystem_name = "window"
}
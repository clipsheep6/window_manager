diff --git a/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_utils.cpp b/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_utils.cpp
index 0a6ae1f4..e345add2 100644
--- a/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_utils.cpp
+++ b/window_scene/interfaces/kits/napi/scene_session_manager/js_scene_utils.cpp
@@ -222,7 +222,7 @@ NativeValue* CreateJsSystemBarPropertyArrayObject(
     return objValue;
 }
 
-static void SetTypeProperty(NativeObject *object, NativeEngine* engine, std::string name, JsSessionType type)
+static void SetTypeProperty(NativeObject *object, NativeEngine* engine, const std::string& name, JsSessionType type)
 {
     object->SetProperty(name.c_str(), CreateJsValue(*engine, static_cast<int32_t>(type)));
 }
diff --git a/window_scene/session_manager/src/screen_session_manager.cpp b/window_scene/session_manager/src/screen_session_manager.cpp
index ed603466..38f334f1 100644
--- a/window_scene/session_manager/src/screen_session_manager.cpp
+++ b/window_scene/session_manager/src/screen_session_manager.cpp
@@ -152,7 +152,7 @@ void ScreenSessionManager::ConfigureScreenScene()
     }
     if (numbersConfig.count("curvedScreenBoundary") != 0) {
         std::vector<int> vtBoundary = static_cast<std::vector<int>>(numbersConfig["curvedScreenBoundary"]);
-        WLOGFD("vtBoundary");
+        WLOGFD("vtBoundary.size=%{public}u", static_cast<uint32_t>(vtBoundary.size()));
     }
     if (stringConfig.count("defaultDisplayCutoutPath") != 0) {
         std::string defaultDisplayCutoutPath = static_cast<std::string>(stringConfig["defaultDisplayCutoutPath"]);

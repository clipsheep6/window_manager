# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

## Build libdms.so
config("libdms_private_config") {
  include_dirs = [
    "//foundation/windowmanager/dm/include",
    "//foundation/windowmanager/interfaces/innerkits/dm",
  ]
}

ohos_prebuilt_etc("display_manager_config") {
  if (device_name == "rk3568") {
    source =
        "//foundation/windowmanager/resources/rk3568/display_manager_config.xml"
    install_enable = true
  } else {
    source =
        "//foundation/windowmanager/resources/other/display_manager_config.xml"
    install_enable = false
  }
  part_name = "window_manager"
  subsystem_name = "window"
  relative_install_dir = "window/resources"
}

config("libdms_public_config") {
  include_dirs = [ "include" ]
}

ohos_shared_library("libdms") {
  sources = [
    "../dm/src/zidl/display_manager_agent_proxy.cpp",
    "src/abstract_display.cpp",
    "src/abstract_display_controller.cpp",
    "src/abstract_screen.cpp",
    "src/abstract_screen_controller.cpp",
    "src/display_manager_agent_controller.cpp",
    "src/display_manager_config.cpp",
    "src/display_manager_service.cpp",
    "src/display_manager_service_inner.cpp",
    "src/display_manager_stub.cpp",
    "src/display_power_controller.cpp",
  ]

  configs = [ ":libdms_private_config" ]

  public_configs = [ ":libdms_public_config" ]

  deps = [
    ":display_manager_config",
    "//foundation/windowmanager/dm:libdm",
    "//foundation/windowmanager/utils:libwmutil",

    # RSSurface
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_client:librender_service_client",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "graphic_standard:surface",
    "hilog_native:libhilog",
    "hitrace_native:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]

  if (is_standard_system) {
    external_deps += [ "startup_l2:syspara" ]
  } else {
    external_deps += [ "startup:syspara" ]
  }

  part_name = "window_manager"
  subsystem_name = "window"
}

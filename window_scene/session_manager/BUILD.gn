# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../windowmanager_aafwk.gni")

config("session_manager_public_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/interfaces/include",
    "${window_base_path}/window_scene",
    "${window_base_path}/window_scene/interfaces/include",
    "${window_base_path}/window_scene/session_manager/include",
    "${window_base_path}/window_scene/session_manager/include/zidl",
    "${window_base_path}/window_scene/session_manager_service/include",

    # for session_manager
    "${multimodalinput_path}/input/interfaces/native/innerkits/event/include",
    "${multimodalinput_path}/input/util/common/include",
    "${ability_runtime_inner_api_path}/ability_manager/include",
    "${window_base_path}/wmserver/include",
    "${window_base_path}/wmserver/include/zidl",

    # for screen_session_manager
    "${window_base_path}/utils/include",
    "${window_base_path}/dm/include",
    "${window_base_path}/interfaces/innerkits/dm",
    "${window_base_path}/dmserver/include",

    # for scene session manager
    "${window_base_path}/interfaces/innerkits/wm",
    "${window_base_path}/wmserver/include",
    "${graphic_base_path}/graphic_2d/rosen/modules/animation/window_animation/include",

    # for window_manager_hilog
    "${window_base_path}/utils/include",

    # for screenlock_manager_interface
    "${screenlock_mgr_path}/services/include",
    "${screenlock_mgr_path}/utils/include",
    "${screenlock_mgr_path}/frameworks/native/include",
    "${window_base_path}/wm/include",
    "${window_base_path}/wm/include/zidl",
  ]
}

ohos_shared_library("scene_session_manager") {
  sources = [
    "../../wm/src/zidl/window_manager_agent_proxy.cpp",
    "src/extension_session_manager.cpp",
    "src/scene_session_manager.cpp",
    "src/session_manager_agent_controller.cpp",
    "src/window_scene_config.cpp",
    "src/zidl/scene_session_manager_stub.cpp",
    "src/zidl/session_listener_proxy.cpp",
    "src/zidl/session_listener_stub.cpp",
  ]

  public_configs = [ ":session_manager_public_config" ]

  deps = [
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:scene_session",
    "${window_base_path}/window_scene/session_manager:screen_session_manager",
    "//third_party/libxml2:libxml2",
  ]

  external_deps = [
    "ability_base:session_info",
    "ability_base:want",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:ability_start_setting",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "display_manager:displaymgr",
    "eventhandler:libeventhandler",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "samgr:samgr_proxy",
  ]

  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_memmgr_plugin)) {
    external_deps += [ "memmgr_plugin:memmgrclient" ]
    defines += [ "MEMMGR_WINDOW_ENABLE" ]
  }

  if (defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_soc_perf)) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RES_SCHED_ENABLE" ]
  }

  innerapi_tags = [ "platformsdk" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

ohos_shared_library("screen_session_manager") {
  sources = [
    "../../dm/src/zidl/display_manager_agent_proxy.cpp",
    "src/screen_cutout_controller.cpp",
    "src/screen_rotation_property.cpp",
    "src/screen_scene_config.cpp",
    "src/screen_sensor_connector.cpp",
    "src/screen_session_manager.cpp",
    "src/session_display_power_controller.cpp",
    "src/zidl/screen_session_manager_stub.cpp",
  ]

  cflags_cc = [ "-std=c++17" ]

  public_configs = [ ":session_manager_public_config" ]

  deps = [
    "${window_base_path}/utils:libwmutil",
    "${window_base_path}/window_scene/common:window_scene_common",
    "${window_base_path}/window_scene/session:screen_session",
    "//third_party/libxml2:libxml2",
  ]

  external_deps = [
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "sensor:sensor_interface_native",
  ]

  defines = []
  if (window_manager_feature_subscribe_motion) {
    if (defined(global_parts_info) && defined(global_parts_info.msdp_motion)) {
      external_deps += [ "motion:motion_interface_native" ]
      defines += [ "WM_SUBSCRIBE_MOTION_ENABLE" ]
    }
  }

  if (is_standard_system) {
    external_deps += [ "init:libbegetutil" ]
  } else {
    external_deps += [ "init_lite:libbegetutil" ]
  }

  innerapi_tags = [ "platformsdk" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

ohos_shared_library("session_manager") {
  sources = [
    "../../wmserver/src/zidl/mock_screen_manager_service_proxy.cpp",
    "../../wmserver/src/zidl/mock_session_manager_service_proxy.cpp",
    "../session_manager_service/src/session_manager_service_proxy.cpp",
    "src/session_manager.cpp",
    "src/zidl/scene_session_manager_proxy.cpp",
    "src/zidl/screen_session_manager_proxy.cpp",
  ]

  cflags_cc = [ "-std=c++17" ]

  public_configs = [ ":session_manager_public_config" ]

  deps = [ "${window_base_path}/utils:libwmutil" ]

  external_deps = [
    "ability_base:session_info",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  innerapi_tags = [ "platformsdk_indirect" ]
  part_name = "window_manager"
  subsystem_name = "window"
}

diff --git a/utils/src/window_property.cpp b/utils/src/window_property.cpp
index a9f63791d9be5381bd141f023b7dcd25d318bdd0..0727ed6a01584c7e6aeaacb5275699bb8251802f 100644
--- a/utils/src/window_property.cpp
+++ b/utils/src/window_property.cpp
@@ -193,7 +193,7 @@ void WindowProperty::UpdatePointerEvent(const std::shared_ptr<MMI::PointerEvent>
     }
     PointInfo originPos =
         WindowHelper::CalculateOriginPosition(transformMat_,
-        { pointerItem.GetDisplayX(), pointerItem.GetDisplayY() });
+        { static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()) });
     pointerItem.SetDisplayX(originPos.x);
     pointerItem.SetDisplayY(originPos.y);
     pointerItem.SetWindowX(originPos.x - windowRect_.posX_);
diff --git a/window_scene/intention_event/src/intention_event_manager.cpp b/window_scene/intention_event/src/intention_event_manager.cpp
index 0baaaba66a27b3dd5ca628605ff14f3a0d912637..57b44f752134bf69728f5dc0a8e704d2818d0b79 100644
--- a/window_scene/intention_event/src/intention_event_manager.cpp
+++ b/window_scene/intention_event/src/intention_event_manager.cpp
@@ -50,7 +50,7 @@ void LogPointInfo(const std::shared_ptr<MMI::PointerEvent>& pointerEvent)
         TLOGD(WmsLogTag::WMS_EVENT, "action point info:windowid:%{public}d,id:%{public}d,displayx:%{public}d,"
             "displayy:%{public}d, windowx:%{public}d, windowy :%{public}d, action :%{public}d pressure: "
             "%{public}f, tiltx :%{public}f, tiltY :%{public}f",
-            windowId, actionId, item.GetDisplayX(), item.GetDisplayY(), item.GetWindowX(), item.GetWindowY(),
+            windowId, actionId, static_cast<int32_t>(item.GetDisplayX()), static_cast<int32_t>(item.GetDisplayY()), static_cast<int32_t>(item.GetWindowX()), static_cast<int32_t>(item.GetWindowY()),
             pointerEvent->GetPointerAction(), item.GetPressure(), item.GetTiltX(), item.GetTiltY());
     }
     auto ids = pointerEvent->GetPointerIds();
@@ -59,7 +59,7 @@ void LogPointInfo(const std::shared_ptr<MMI::PointerEvent>& pointerEvent)
         if (pointerEvent->GetPointerItem(id, item)) {
             TLOGD(WmsLogTag::WMS_EVENT, "all point info: id: %{public}d, x:%{public}d, y:%{public}d, "
                 "isPressend:%{public}d, pressure:%{public}f, tiltX:%{public}f, tiltY:%{public}f",
-            actionId, item.GetWindowX(), item.GetWindowY(), item.IsPressed(), item.GetPressure(),
+            actionId, static_cast<int32_t>(item.GetWindowX()), static_cast<int32_t>(item.GetWindowY()), item.IsPressed(), item.GetPressure(),
             item.GetTiltX(), item.GetTiltY());
         }
     }
diff --git a/window_scene/session/container/src/window_event_channel.cpp b/window_scene/session/container/src/window_event_channel.cpp
index 0d8902caa597954fd925b91161443d8558193d24..3e302f50f5504b7312131ea07bd4e554436f8cc4 100644
--- a/window_scene/session/container/src/window_event_channel.cpp
+++ b/window_scene/session/container/src/window_event_channel.cpp
@@ -209,8 +209,8 @@ void WindowEventChannel::PrintPointerEvent(const std::shared_ptr<MMI::PointerEve
             }
             WLOGFD("pointerId:%{public}d,DownTime:%{public}" PRId64 ",IsPressed:%{public}d,"
                 "DisplayX:%{public}d,DisplayY:%{public}d,WindowX:%{public}d,WindowY:%{public}d,",
-                pointerId, item.GetDownTime(), item.IsPressed(), item.GetDisplayX(), item.GetDisplayY(),
-                item.GetWindowX(), item.GetWindowY());
+                pointerId, item.GetDownTime(), item.IsPressed(), static_cast<int32_t>(item.GetDisplayX()), static_cast<int32_t>(item.GetDisplayY()),
+                static_cast<int32_t>(item.GetWindowX()), static_cast<int32_t>(item.GetWindowY()));
         }
     } else {
         PrintInfoPointerEvent(event);
diff --git a/window_scene/session/host/src/move_drag_controller.cpp b/window_scene/session/host/src/move_drag_controller.cpp
index 35ce07d7380ceb46eba419d85cceaf0386d0bd01..250f4e7ef4c21585cb6cfad133467ce7580e4e69 100644
--- a/window_scene/session/host/src/move_drag_controller.cpp
+++ b/window_scene/session/host/src/move_drag_controller.cpp
@@ -267,8 +267,8 @@ bool MoveDragController::ConsumeDragEvent(const std::shared_ptr<MMI::PointerEven
         default:
             return false;
     }
-    int32_t tranX = pointerItem.GetDisplayX() - moveDragProperty_.originalPointerPosX_;
-    int32_t tranY = pointerItem.GetDisplayY() - moveDragProperty_.originalPointerPosY_;
+    int32_t tranX = static_cast<int32_t>(pointerItem.GetDisplayX()) - moveDragProperty_.originalPointerPosX_;
+    int32_t tranY = static_cast<int32_t>(pointerItem.GetDisplayY()) - moveDragProperty_.originalPointerPosY_;
 
     if (aspectRatio_ > NEAR_ZERO) {
         moveDragProperty_.targetRect_ = CalcFixedAspectRatioTargetRect(type_, tranX, tranY, aspectRatio_,
diff --git a/window_scene/session/host/src/scene_session.cpp b/window_scene/session/host/src/scene_session.cpp
index 3ca17e7845d087081083d66eeef3a03e6f43df53..c91968ad87b9717a08e99ebbaaeb8952f40e5e6d 100644
--- a/window_scene/session/host/src/scene_session.cpp
+++ b/window_scene/session/host/src/scene_session.cpp
@@ -1066,8 +1066,8 @@ WSError SceneSession::HandlePointerStyle(const std::shared_ptr<MMI::PointerEvent
         pointerEvent->MarkProcessed();
         return WSError::WS_ERROR_INVALID_PARAM;
     }
-    int32_t mousePointX = pointerItem.GetDisplayX();
-    int32_t mousePointY = pointerItem.GetDisplayY();
+    int32_t mousePointX = static_cast<int32_t>(pointerItem.GetDisplayX());
+    int32_t mousePointY = static_cast<int32_t>(pointerItem.GetDisplayY());
 
     auto displayInfo = DisplayManager::GetInstance().GetDisplayById(pointerEvent->GetTargetDisplayId());
     if (displayInfo != nullptr) {
diff --git a/window_scene/session_manager/src/scene_session_manager.cpp b/window_scene/session_manager/src/scene_session_manager.cpp
index 309df391907449d4ad217b6a8abf596f37e09fb2..d332891ac0d5fcad73a431c7c67c75cd831d2173 100644
--- a/window_scene/session_manager/src/scene_session_manager.cpp
+++ b/window_scene/session_manager/src/scene_session_manager.cpp
@@ -4442,8 +4442,8 @@ static void FillSecCompEnhanceData(const std::shared_ptr<MMI::PointerEvent>& poi
         double y;
         uint64_t time;
     } pointerEventData = {
-        .x = pointerItem.GetDisplayX(),
-        .y = pointerItem.GetDisplayY(),
+        .x = static_cast<int32_t>(pointerItem.GetDisplayX()),
+        .y = static_cast<int32_t>(pointerItem.GetDisplayY()),
         .time = pointerEvent->GetActionTime()
     };
 
diff --git a/wm/src/window_impl.cpp b/wm/src/window_impl.cpp
index feb0d59a5d810942426bada12e6fc59b6d485626..49d9aea7d731b17a61828a67f4b23b8f238e552e 100644
--- a/wm/src/window_impl.cpp
+++ b/wm/src/window_impl.cpp
@@ -2613,7 +2613,7 @@ void WindowImpl::UpdatePointerEventForStretchableWindow(const std::shared_ptr<MM
     const Rect& originRect = property_->GetOriginRect();
     PointInfo originPos =
         WindowHelper::CalculateOriginPosition(originRect, GetRect(),
-        { pointerItem.GetDisplayX(), pointerItem.GetDisplayY() });
+        { static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()) });
     pointerItem.SetDisplayX(originPos.x);
     pointerItem.SetDisplayY(originPos.y);
     pointerItem.SetWindowX(originPos.x - originRect.posX_);
diff --git a/wm/src/window_input_channel.cpp b/wm/src/window_input_channel.cpp
index 6a34d05af26b59acf3abac4b4c940ab7e5e2142e..5c213f087ae4e0f0a62f3ebb1a0de24abbd074f7 100644
--- a/wm/src/window_input_channel.cpp
+++ b/wm/src/window_input_channel.cpp
@@ -123,7 +123,7 @@ void WindowInputChannel::HandlePointerEvent(std::shared_ptr<MMI::PointerEvent>&
             pointerEvent->GetPointerAction() == MMI::PointerEvent::POINTER_ACTION_BUTTON_DOWN) {
             MMI::PointerEvent::PointerItem pointerItem;
             if (pointerEvent->GetPointerItem(pointerEvent->GetPointerId(), pointerItem)) {
-                window_->NotifyTouchDialogTarget(pointerItem.GetDisplayX(), pointerItem.GetDisplayY());
+                window_->NotifyTouchDialogTarget(static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()));
             }
         }
         pointerEvent->MarkProcessed();
@@ -135,15 +135,15 @@ void WindowInputChannel::HandlePointerEvent(std::shared_ptr<MMI::PointerEvent>&
     if (isModal && isSubWindow) {
         MMI::PointerEvent::PointerItem pointerItem;
         bool validPointItem = pointerEvent->GetPointerItem(pointerEvent->GetPointerId(), pointerItem);
-        bool outsideWindow = !WindowHelper::IsPointInTargetRectWithBound(pointerItem.GetDisplayX(),
-            pointerItem.GetDisplayY(), window_->GetRect());
+        bool outsideWindow = !WindowHelper::IsPointInTargetRectWithBound(static_cast<int32_t>(pointerItem.GetDisplayX()),
+            static_cast<int32_t>(pointerItem.GetDisplayY()), window_->GetRect());
         auto action = pointerEvent->GetPointerAction();
         bool isTargetAction = (action == MMI::PointerEvent::POINTER_ACTION_DOWN ||
             action == MMI::PointerEvent::POINTER_ACTION_BUTTON_DOWN);
         bool isInterceptAction = isTargetAction || action == MMI::PointerEvent::POINTER_ACTION_MOVE;
         if (validPointItem && outsideWindow && isInterceptAction) {
             if (isTargetAction) {
-                window_->NotifyTouchDialogTarget(pointerItem.GetDisplayX(), pointerItem.GetDisplayY());
+                window_->NotifyTouchDialogTarget(static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()));
             }
             pointerEvent->MarkProcessed();
             return;
diff --git a/wm/src/window_scene_session_impl.cpp b/wm/src/window_scene_session_impl.cpp
index b3629e054fcc12601e8520bf2599dcd390a147df..d18cbdd95c926d2bb40205664e0e72e672fefc39 100644
--- a/wm/src/window_scene_session_impl.cpp
+++ b/wm/src/window_scene_session_impl.cpp
@@ -440,8 +440,8 @@ bool WindowSceneSessionImpl::HandlePointDownEvent(const std::shared_ptr<MMI::Poi
 {
     bool needNotifyEvent = true;
     uint32_t titleBarHeight = static_cast<uint32_t>(WINDOW_TITLE_BAR_HEIGHT * vpr);
-    int32_t winX = pointerItem.GetWindowX();
-    int32_t winY = pointerItem.GetWindowY();
+    int32_t winX = static_cast<int32_t>(pointerItem.GetWindowX());
+    int32_t winY = static_cast<int32_t>(pointerItem.GetWindowY());
     bool isMoveArea = (0 <= winX && winX <= static_cast<int32_t>(rect.width_)) &&
         (0 <= winY && winY <= static_cast<int32_t>(titleBarHeight));
     int outside = (sourceType == MMI::PointerEvent::SOURCE_TYPE_MOUSE) ? static_cast<int>(HOTZONE_POINTER * vpr) :
@@ -450,7 +450,7 @@ bool WindowSceneSessionImpl::HandlePointDownEvent(const std::shared_ptr<MMI::Poi
     WindowType windowType = property_->GetWindowType();
     bool isDecorDialog = windowType == WindowType::WINDOW_TYPE_DIALOG && property_->IsDecorEnable();
     if (WindowHelper::IsSystemWindow(windowType) && !isDecorDialog) {
-        hostSession_->ProcessPointDownSession(pointerItem.GetDisplayX(), pointerItem.GetDisplayY());
+        hostSession_->ProcessPointDownSession(static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()));
     } else {
         if (dragType != AreaType::UNDEFINED) {
             hostSession_->SendPointEventForMoveDrag(pointerEvent);
@@ -458,7 +458,7 @@ bool WindowSceneSessionImpl::HandlePointDownEvent(const std::shared_ptr<MMI::Poi
         } else if (isMoveArea) {
             hostSession_->SendPointEventForMoveDrag(pointerEvent);
         } else {
-            hostSession_->ProcessPointDownSession(pointerItem.GetDisplayX(), pointerItem.GetDisplayY());
+            hostSession_->ProcessPointDownSession(static_cast<int32_t>(pointerItem.GetDisplayX()), static_cast<int32_t>(pointerItem.GetDisplayY()));
         }
     }
     return needNotifyEvent;
diff --git a/wmserver/src/drag_controller.cpp b/wmserver/src/drag_controller.cpp
index 48b98f6a973bb826ea6cac687692233e72be81c9..aca17e5fc06003835f9486cb56a3404ad6385731 100644
--- a/wmserver/src/drag_controller.cpp
+++ b/wmserver/src/drag_controller.cpp
@@ -460,8 +460,8 @@ void MoveDragController::HandlePointerEvent(const std::shared_ptr<MMI::PointerEv
         return;
     }
 
-    int32_t pointPosX = pointerItem.GetDisplayX();
-    int32_t pointPosY = pointerItem.GetDisplayY();
+    int32_t pointPosX = static_cast<int32_t>(pointerItem.GetDisplayX());
+    int32_t pointPosY = static_cast<int32_t>(pointerItem.GetDisplayY());
     int32_t action = pointerEvent->GetPointerAction();
     int32_t targetDisplayId = pointerEvent->GetTargetDisplayId();
     ConvertPointerPosToDisplayGroupPos(targetDisplayId, pointPosX, pointPosY);

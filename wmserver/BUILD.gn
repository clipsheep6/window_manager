# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/notification/ces_standard/event.gni")
import("//build/ohos.gni")

## Build libwms.so
config("libwms_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/window_snapshot",
    "//utils/system/safwk/native/include",
    "//base/notification/ces_standard/cesfwk/innerkits/include",
    "//foundation/windowmanager/interfaces/innerkits/wm",
    "//foundation/windowmanager/interfaces/innerkits/dm",
    "//foundation/windowmanager/wm/include",
    "//foundation/windowmanager/utils/include",
    "//foundation/windowmanager/dm/include",
    "//foundation/windowmanager/dmserver/include",
  ]
}

ohos_shared_library("libwms") {
  sources = [
    "../dm/src/zidl/display_manager_agent_proxy.cpp",
    "../dmserver/src/abstract_display.cpp",
    "../dmserver/src/abstract_display_controller.cpp",
    "../dmserver/src/abstract_screen.cpp",
    "../dmserver/src/abstract_screen_controller.cpp",
    "../dmserver/src/display_manager_service.cpp",
    "../dmserver/src/display_manager_service_inner.cpp",
    "../dmserver/src/display_manager_stub.cpp",
    "../dmserver/src/display_node_control.cpp",
    "../dmserver/src/display_power_controller.cpp",
    "../wm/src/window_proxy.cpp",
    "../wm/src/zidl/window_manager_agent_proxy.cpp",
    "src/input_window_monitor.cpp",
    "src/window_controller.cpp",
    "src/window_inner_manager.cpp",
    "src/window_layout_policy.cpp",
    "src/window_manager_service.cpp",
    "src/window_manager_service_inner.cpp",
    "src/window_manager_stub.cpp",
    "src/window_node.cpp",
    "src/window_node_container.cpp",
    "src/window_root.cpp",
    "src/window_snapshot/snapshot_controller.cpp",
    "src/window_snapshot/snapshot_proxy.cpp",
    "src/window_snapshot/snapshot_stub.cpp",
    "src/window_zorder_policy.cpp",
  ]

  configs = [ ":libwms_config" ]

  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//base/notification/ces_standard/frameworks/native:cesfwk_innerkits",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//foundation/graphic/standard:libsurface",
    "//foundation/graphic/standard/rosen/modules/render_service_base:librender_service_base",
    "//foundation/windowmanager/wm:libwm",
    "//utils/native/base:utils",
  ]

  public_deps = [
    # ability manager
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager:ability_manager",
    "//foundation/aafwk/standard/interfaces/innerkits/want:want",
    "//foundation/graphic/standard:libsurface",
    "//foundation/graphic/standard/rosen/modules/render_service_base:librender_service_base",

    # RSSurface
    "//foundation/ace/ace_engine/build/external_config/flutter/skia:ace_skia_ohos",
    "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",

    # IMS
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//foundation/windowmanager/wm:libwmutil",
  ]

  external_deps = [
    "bytrace_standard:bytrace_core",
    "ipc:ipc_core",
  ]

  part_name = "window_manager"
  subsystem_name = "window"
}

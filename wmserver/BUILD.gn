# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/graphic/standard/graphic_config.gni")

## Build libwms.so
config("libwms_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/window_snapshot",
    "//utils/system/safwk/native/include",
    "//foundation/windowmanager/interfaces/innerkits/wm",
    "//foundation/windowmanager/interfaces/innerkits/dm",
    "//foundation/windowmanager/wm/include",
    "//foundation/windowmanager/utils/include",
    "//foundation/windowmanager/dm/include",
    "//foundation/windowmanager/dmserver/include",
  ]
  defines = []

  # Get gpu defines
  defines += gpu_defines
}

ohos_prebuilt_etc("window_divider_image") {
  source = "//foundation/windowmanager/resources/bg_split_handle.png"
  part_name = "window_manager"
  subsystem_name = "window"
  relative_install_dir = "window/resources"
}

ohos_shared_library("libwms") {
  sources = [
    "../wm/src/window_proxy.cpp",
    "../wm/src/zidl/window_manager_agent_proxy.cpp",
    "src/avoid_area_controller.cpp",
    "src/drag_controller.cpp",
    "src/freeze_controller.cpp",
    "src/input_window_monitor.cpp",
    "src/window_controller.cpp",
    "src/window_inner_manager.cpp",
    "src/window_layout_policy.cpp",
    "src/window_layout_policy_cascade.cpp",
    "src/window_layout_policy_tile.cpp",
    "src/window_manager_agent_controller.cpp",
    "src/window_manager_service.cpp",
    "src/window_manager_stub.cpp",
    "src/window_node.cpp",
    "src/window_node_container.cpp",
    "src/window_root.cpp",
    "src/window_snapshot/snapshot_controller.cpp",
    "src/window_snapshot/snapshot_proxy.cpp",
    "src/window_snapshot/snapshot_stub.cpp",
    "src/window_zorder_policy.cpp",
  ]

  configs = [ ":libwms_config" ]

  deps = [
    ":window_divider_image",
    "//foundation/ace/ace_engine/build/external_config/flutter/skia:ace_skia_ohos",
    "//foundation/graphic/standard/rosen/modules/render_service_client:librender_service_client",
    "//foundation/windowmanager/dm:libdm",
    "//foundation/windowmanager/dmserver:libdms",
    "//foundation/windowmanager/utils:libwmutil",
    "//foundation/windowmanager/wm:libwm",
  ]

  public_deps = [
    # IMS libdms need delete it
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "bytrace_standard:bytrace_core",
    "ces_standard:cesfwk_innerkits",
    "graphic_standard:surface",
    "hilog_native:libhilog",
    "hisysevent_native:libhisysevent",
    "input:libmmi-client",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
  ]

  if (is_standard_system) {
    external_deps += [ "startup_l2:syspara" ]
  } else {
    external_deps += [ "startup:syspara" ]
  }

  part_name = "window_manager"
  subsystem_name = "window"
}

group("test") {
  testonly = true
  deps = [ "test:test" ]
}

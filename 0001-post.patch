From 6cda9387c99c35c0f95e0812a4360ae94b19bd53 Mon Sep 17 00:00:00 2001
From: Ning Yuanfeng <Nyuanfeng@163.com>
Date: Thu, 28 Mar 2024 12:26:17 +0800
Subject: [PATCH] =?UTF-8?q?=E4=BF=AE=E5=A4=8D=E9=80=80=E5=87=BA=E5=BA=94?=
 =?UTF-8?q?=E7=94=A8=E6=97=B6=E7=94=BB=E4=B8=AD=E7=94=BB=E8=87=AA=E5=8A=A8?=
 =?UTF-8?q?=E6=8B=89=E8=B5=B7=E5=8F=8A=E6=8E=A7=E5=88=B6=E4=BA=8B=E4=BB=B6?=
 =?UTF-8?q?post=E5=88=B0=E4=B8=BB=E7=BA=BF=E7=A8=8B=E6=89=A7=E8=A1=8C?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Ning Yuanfeng <Nyuanfeng@163.com>
---
 .../src/scene_session_manager.cpp              | 12 ++++++++++--
 wm/src/picture_in_picture_controller.cpp       | 18 ++++++++++++++++--
 wm/src/window.cpp                              |  2 +-
 wm/src/window_session_impl.cpp                 |  5 ++++-
 4 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/window_scene/session_manager/src/scene_session_manager.cpp b/window_scene/session_manager/src/scene_session_manager.cpp
index c16746acd..938e3dfa3 100644
--- a/window_scene/session_manager/src/scene_session_manager.cpp
+++ b/window_scene/session_manager/src/scene_session_manager.cpp
@@ -1757,8 +1757,16 @@ WSError SceneSessionManager::CreateAndConnectSpecificSession(const sptr<ISession
         return WSError::WS_ERROR_INVALID_WINDOW;
     }
 
-    if (property->GetWindowType() == WindowType::WINDOW_TYPE_PIP && !CheckPiPPriority(property->GetPiPTemplateInfo())) {
-        return WSError::WS_DO_NOTHING;
+    if (property->GetWindowType() == WindowType::WINDOW_TYPE_PIP) {
+        if (!CheckPiPPriority(property->GetPiPTemplateInfo())) {
+            TLOGI(WmsLogTag::WMS_PIP, "skip create pip window by priority");
+            return WSError::WS_DO_NOTHING;
+        }
+        auto parentSession = GetSceneSession(property->GetParentPersistentId());
+        if (parentSession->GetSessionState() == SessionState::STATE_DISCONNECT) {
+            TLOGI(WmsLogTag::WMS_PIP, "skip create pip window as parent window disconnected");
+            return WSError::WS_DO_NOTHING;
+        }
     }
     TLOGI(WmsLogTag::WMS_LIFE, "create specific start, name: %{public}s, type: %{public}d",
         property->GetWindowName().c_str(), property->GetWindowType());
diff --git a/wm/src/picture_in_picture_controller.cpp b/wm/src/picture_in_picture_controller.cpp
index 0592fefb5..f9a5ed25f 100644
--- a/wm/src/picture_in_picture_controller.cpp
+++ b/wm/src/picture_in_picture_controller.cpp
@@ -29,6 +29,7 @@
 namespace OHOS {
 namespace Rosen {
 namespace {
+    constexpr int32_t DELAY_ANIM = 500;
     constexpr int32_t SUCCESS = 1;
     constexpr int32_t FAILED = 0;
     constexpr uint32_t PIP_LOW_PRIORITY = 0;
@@ -96,7 +97,7 @@ WMError PictureInPictureController::CreatePictureInPictureWindow()
     pipTemplateInfo.priority = GetPipPriority(pipOption_->GetPipTemplate());
     sptr<Window> window = Window::CreatePiP(windowOption, pipTemplateInfo, context->lock(), errCode);
     if (window == nullptr || errCode != WMError::WM_OK) {
-        TLOGE(WmsLogTag::WMS_PIP, "Window create failed, reason: %{public}d", errCode);
+        TLOGW(WmsLogTag::WMS_PIP, "Window create failed, reason: %{public}d", errCode);
         return WMError::WM_ERROR_PIP_CREATE_FAILED;
     }
     window_ = window;
@@ -445,7 +446,20 @@ void PictureInPictureController::RestorePictureInPictureWindow()
             TLOGE(WmsLogTag::WMS_PIP, "navController is nullptr");
         }
     }
-    StopPictureInPicture(true, StopPipType::NULL_STOP);
+    if (handler_) {
+        auto stopTask = [weakThis = wptr(this)]() {
+            auto controller = weakThis.promote();
+            if (!controller) {
+                TLOGE(WmsLogTag::WMS_PIP, "controller is nullptr");
+                return;
+            }
+            controller->StopPictureInPicture(true, StopPipType::NULL_STOP);
+        };
+        handler_->PostTask(stopTask, "wms:StopPictureInPicture_restore", DELAY_ANIM);
+    } else {
+        TLOGW(WmsLogTag::WMS_PIP, "StopPictureInPicture no delay while restore");
+        StopPictureInPicture(true, StopPipType::NULL_STOP);
+    }
     SingletonContainer::Get<PiPReporter>().ReportPiPRestore();
     TLOGI(WmsLogTag::WMS_PIP, "restore pip main window finished");
 }
diff --git a/wm/src/window.cpp b/wm/src/window.cpp
index 13eca6e37..3bf2e7bf4 100644
--- a/wm/src/window.cpp
+++ b/wm/src/window.cpp
@@ -168,7 +168,7 @@ sptr<Window> Window::CreatePiP(sptr<WindowOption>& option, const PiPTemplateInfo
     WMError error = windowSessionImpl->Create(context, nullptr);
     if (error != WMError::WM_OK) {
         errCode = error;
-        TLOGD(WmsLogTag::WMS_PIP, "Create pip window with session, error: %{public}u", static_cast<uint32_t>(errCode));
+        TLOGW(WmsLogTag::WMS_PIP, "Create pip window with session, error: %{public}u", static_cast<uint32_t>(errCode));
         return nullptr;
     }
     return windowSessionImpl;
diff --git a/wm/src/window_session_impl.cpp b/wm/src/window_session_impl.cpp
index dac1e77be..d898023ed 100644
--- a/wm/src/window_session_impl.cpp
+++ b/wm/src/window_session_impl.cpp
@@ -2029,7 +2029,10 @@ WSError WindowSessionImpl::UpdateAvoidArea(const sptr<AvoidArea>& avoidArea, Avo
 WSError WindowSessionImpl::SetPipActionEvent(const std::string& action, int32_t status)
 {
     TLOGI(WmsLogTag::WMS_PIP, "action: %{public}s, status: %{public}d", action.c_str(), status);
-    PictureInPictureManager::DoActionEvent(action, status);
+    auto task = [action, status]() {
+        PictureInPictureManager::DoActionEvent(action, status);
+    };
+    handler_->PostTask(task, "WMS_WindowSessionImpl_SetPipActionEvent");
     return WSError::WS_OK;
 }
 
-- 
2.42.0.windows.2

